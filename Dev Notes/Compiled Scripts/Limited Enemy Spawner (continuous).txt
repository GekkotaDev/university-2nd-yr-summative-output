// continuously spawns enemies as long as the limit isn't reached, this makes it so that there are only a limited amount of enemies that exists. For example the max count is 10 and the enemies that exist is 10, if the player kills 3 enemies, the spawner would spawn 3 more and repeat it whenever the existing enemies is below the maximum limit allowed.

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemiesManager : MonoBehaviour
{
    [SerializeField] GameObject enemy;
    [SerializeField] Vector2 spawnArea;
    [SerializeField] float spawnTimer;
    [SerializeField] GameObject player; // don't forget to put the player's prefab into this field by dragging the PlayerCharacter into it
    [SerializeField] int maxEnemies = 10; // The maximum number of enemies to exist at once
    float timer;

    private List<GameObject> activeEnemies = new List<GameObject>(); // List to keep track of active enemies

    private void Update()
    {
        timer -= Time.deltaTime;
        if (timer <= 0f)
        {
            // Check how many active enemies exist before spawning another
            // Remove inactive enemies from the list
            RemoveInactiveEnemies();
            
            if (activeEnemies.Count < maxEnemies)
            {
                SpawnEnemy();
            }

            // Reset the spawn timer
            timer = spawnTimer;
        }
    }

    private void SpawnEnemy()
    {
        Vector3 position = GenerateRandomPosition(); // sets the location of the spawner
        position += player.transform.position; // sets the position of the spawned enemies around towards the location of the player
        GameObject newEnemy = Instantiate(enemy);
        newEnemy.transform.position = position;
        newEnemy.GetComponent<Enemy>().SetTarget(player);
        newEnemy.transform.parent = transform; // puts the spawned enemies under a spawner's gameobject so that the heirarchy isn't messy

        activeEnemies.Add(newEnemy); // Add the spawned enemy to the activeEnemies list
    }

    private void RemoveInactiveEnemies()
    {
        // Remove enemies that are no longer active (destroyed or deactivated)
        activeEnemies.RemoveAll(enemy => enemy == null || !enemy.activeInHierarchy);
    }

    private Vector3 GenerateRandomPosition()
    {
        Vector3 position = new Vector3();
        float f = UnityEngine.Random.value > 0.5f ? -1f : 1f;
        if (UnityEngine.Random.value > 0.5f)
        {
            position.x = UnityEngine.Random.Range(-spawnArea.x, spawnArea.x);
            position.y = spawnArea.y * f;
        }
        else
        {
            position.y = UnityEngine.Random.Range(-spawnArea.y, spawnArea.y);
            position.x = spawnArea.x * f;
        }

        position.z = 0;

        return position;
    }
}
